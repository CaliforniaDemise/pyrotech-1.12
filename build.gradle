import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.33'
}

/*
def getVersionName = { String workTree ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', "--git-dir=\"${workTree}/.git\"", "--work-tree=\"${workTree}\"", 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
*/

version = project.mod_version
group = 'com.codetaylor.mc.pyrotech'
archivesBaseName = 'pyrotech'

sourceCompatibility = targetCompatibility = "1.8"
compileJava {

    /*doFirst {
        project.sourceSets.main.java.srcDirs.each { dir ->
            copy {
                from dir
                into "${project.buildDir}/modifiedSrc"
                include "astast/ast.java"
                filter {
                    it.replaceAll('@@VERSION@@', project.version)
                }
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
            println "   [OK] Preprocessed [${dir}]"
        }

        source = "${project.buildDir}/modifiedSrc"
        classpath = project.sourceSets.main.compileClasspath
        //destinationDir = file("${project.buildDir}/classes")
    }*/

    options.encoding = 'UTF-8'
    sourceCompatibility = targetCompatibility = "1.8"

    doLast {
        println "   [OK] Compiled [${project.name}]"
    }
}

minecraft {
    mcVersion = "1.12.2"
}

apply from: 'dependencies.gradle'

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}